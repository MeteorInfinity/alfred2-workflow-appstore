<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>alfred.workflow.appstore</string>
	<key>connections</key>
	<dict>
		<key>008BEB46-2A21-4D90-A585-9E220A388C69</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>514C7F51-5631-4B4C-9409-6EED2A62F6B8</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>93843284-FB0D-40F4-9660-FD9D9F19CFA9</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>514C7F51-5631-4B4C-9409-6EED2A62F6B8</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Siqi Yi</string>
	<key>description</key>
	<string>Search Apps in Store</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>App Store - COPY</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>app</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching now, please wait...</string>
				<key>script</key>
				<string>#!/usr/bin/python
#_*_ coding:UTF-8 _*_
#
# Copyright by Yi Siqi. All Rights Reserved.

from datetime import datetime
import json
import urllib
import urllib2

import alfred
import i18n

theQuery = '{query}'
queryParam = { 'country':i18n.dic['COUNTRY'], 'limit':'25', 'term': theQuery }
url = 'http://itunes.apple.com/search?entity=software,iPadSoftware&amp;%s' % urllib.urlencode(queryParam)

request = urllib2.Request(url)
request.add_header('Accept','application/json')
request.add_header('Content-Type','application/json')
req_open = urllib2.build_opener()
conn = req_open.open(request)
req_data = conn.read()
data = json.loads(req_data)

results = []

for app in data['results']:
  
  title = app['trackCensoredName']
  url = app['trackViewUrl']
  
  price = app['price']
  if (price == 0):
    price = i18n.dic['FREE']
  else:
    price = i18n.dic[app['currency']] + '%-3.2f' % price

  device = i18n.dic['FOR_IPAD']
  if 'iosUniversal' in app['features']:
    device = i18n.dic['UNIVERSAL']
  elif ', '.join(app['supportedDevices']).find('iPhone') &gt;= 0:
    device = i18n.dic['FOR_IPHONE']

  ver = '%s: %s' % (i18n.dic['VERSION'], app['version'])
  # if len(ver) &lt; 13:
  #  ver += '\t'

  try:
    aur = app['averageUserRating']
    urc = app['userRatingCount']
  except KeyError as e:
    aur = 0
    urc = 0
  rat = '%s: %3.1f %s %8.0f %s' % (i18n.dic['RATINGS'], aur, i18n.dic['RAT_COUNT'], urc, i18n.dic['RAT_TAIL'])
  if len('%s' % urc) &lt; 3:
    rat += '\t'

  dev = '%s: %s' % (i18n.dic['BY'], app['sellerName'])

  subtitle = [device, price, ver, rat, dev]
  subtitle = '\t'.join(subtitle)

  icon = ('icon.png', {'type': 'png'})

  item = alfred.Item({'uid': 1, 'arg': url}, title, subtitle, icon)
  results.append(item)

if len(data['results']) == 0:
  url = 'https://www.google.com/#newwindow=1&amp;%s' % urllib.urlencode({'q':theQuery})
  item = alfred.Item({'uid': 1, 'arg': url}, i18n.dic['NULL_TITLE'], i18n.dic['NULL_SUBTITLE'], ('GoogleIcon.png', {'type': 'png'}))
  results.append(item)

xml = alfred.xml(results)
alfred.write(xml)
</string>
				<key>subtext</key>
				<string>Find apps in iTunes App Store</string>
				<key>title</key>
				<string>Find Apps in Store</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>93843284-FB0D-40F4-9660-FD9D9F19CFA9</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>plusspaces</key>
				<false/>
				<key>url</key>
				<string>{query}</string>
				<key>utf8</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.openurl</string>
			<key>uid</key>
			<string>514C7F51-5631-4B4C-9409-6EED2A62F6B8</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>36</integer>
				<key>keyword</key>
				<string>mas</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching now, please wait...</string>
				<key>script</key>
				<string>#!/usr/bin/python
#_*_ coding:UTF-8 _*_
#
# Copyright by Yi Siqi. All Rights Reserved.

from datetime import datetime
import json
import urllib
import urllib2

import alfred
import i18n

curs = { 'CNY': u'ï¿¥', 'USD': u'$' }

theQuery = '{query}'
queryParam = { 'country':i18n.dic['COUNTRY'], 'limit':'25', 'term': theQuery }
url = 'http://itunes.apple.com/search?entity=macSoftware&amp;%s' % urllib.urlencode(queryParam)

request = urllib2.Request(url)
request.add_header('Accept','application/json')
request.add_header('Content-Type','application/json')
req_open = urllib2.build_opener()
conn = req_open.open(request)
req_data = conn.read()
data = json.loads(req_data)

results = []

for app in data['results']:
  
  title = app['trackCensoredName']
  url = app['trackViewUrl']
  
  price = app['price']
  if (price == 0):
    price = i18n.dic['FREE'] + u'\t'
  else:
    price = i18n.dic[app['currency']] + '%-3.2f' % price

  # device = i18n.dic['FOR_IPAD']
  # if 'iosUniversal' in app['features']:
  #   device = i18n.dic['UNIVERSAL']
  # elif ', '.join(app['supportedDevices']).find('iPhone') &gt;= 0:
  #   device = i18n.dic['FOR_IPHONE']

  ver = '%s: %s' % (i18n.dic['VERSION'], app['version'])
  # if len(ver) &lt; 13:
  #  ver += '\t'

  try:
    aur = app['averageUserRating']
    urc = app['userRatingCount']
  except KeyError as e:
    aur = 0
    urc = 0
  rat = '%s: %3.1f %s %8.0f %s' % (i18n.dic['RATINGS'], aur, i18n.dic['RAT_COUNT'], urc, i18n.dic['RAT_TAIL'])
  if len('%s' % urc) &lt; 3:
    rat += '\t'

  dev = '%s: %s' % (i18n.dic['BY'], app['sellerName'])

  # subtitle = [device, price, ver, rat, dev]
  subtitle = [price, ver, rat, dev]
  subtitle = '\t'.join(subtitle)

  icon = ('app.icon.png', {'type': 'png'})

  item = alfred.Item({'uid': 1, 'arg': url}, title, subtitle, icon)
  results.append(item)

if len(data['results']) == 0:
  url = 'https://www.google.com/#newwindow=1&amp;%s' % urllib.urlencode({'q':theQuery})
  item = alfred.Item({'uid': 1, 'arg': url}, i18n.dic['NULL_TITLE'], i18n.dic['NULL_SUBTITLE'], ('GoogleIcon.png', {'type': 'png'}))
  results.append(item)

xml = alfred.xml(results)
alfred.write(xml)
</string>
				<key>subtext</key>
				<string>Find Apps in Mac App Store</string>
				<key>title</key>
				<string>Find Apps in Store</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>008BEB46-2A21-4D90-A585-9E220A388C69</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
	</array>
	<key>readme</key>
	<string></string>
	<key>uidata</key>
	<dict>
		<key>008BEB46-2A21-4D90-A585-9E220A388C69</key>
		<dict>
			<key>ypos</key>
			<real>130</real>
		</dict>
		<key>514C7F51-5631-4B4C-9409-6EED2A62F6B8</key>
		<dict>
			<key>ypos</key>
			<real>70</real>
		</dict>
		<key>93843284-FB0D-40F4-9660-FD9D9F19CFA9</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
	</dict>
	<key>webaddress</key>
	<string>http://yisiqi.github.com</string>
</dict>
</plist>
